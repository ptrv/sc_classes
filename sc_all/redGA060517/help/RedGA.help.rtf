{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green0\blue191;
\red191\green0\blue0;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 RedGA\cf0 			
\fs24 		perform genetic algorithms
\f1\b0 \

\f0\b\fs36 \

\f1\b0\fs24 superclass: \cf2 Object
\fs36 \cf0 \
\

\fs24 class for breeding new genomes by simple crossover and mutation.  works with the \cf2 RedGAGenome\cf0  class.\
\cf3 see also [\cf4 \ul \ulc4 RedGAGenome\cf3 \ulnone ], [\cf4 \ul \ulc4 RedGAPhenome\cf3 \ulnone ]
\fs36 \cf0 \

\fs24 \
	
\f0\b *crossOverRate_(percent)
\f1\b0 \
		for each gene - the chance of crossover to occur while copying.  defaults to 0.1 which is good\
		for the multipoint crossover method.  singlepoint works better with a higher value here.\
	\
	
\f0\b *mutationRate_(percent)
\f1\b0 \
		for each gene - the chance of it being replaced with the value of mutationFunction.\
		percentage usually kept very small and here it defaults to 0.001 (0.1%)\
	\
	
\f0\b *mutationFunc_(function)
\f1\b0 \
		if a gene is to be mutated - replace it with the value of this function.  defaults to \{1.0.rand\}\
		the current gene and its index are passed in as 1st and 2nd arguments.\
	\
	
\f0\b *singlePointCrossOver(parentA, parentB)
\f1\b0 \
		returns 2 new genomes [childA, childB] by performing a crossover at any random point.\
		but note: the classvar crossOverRate above decides how likely it is for this to happen at all.\
		if no crossover the 2 parent chromosomes (this and the argument parent) are just copied.\
		and their respective fitness is averaged and given to the children.\
		also note that by default the classvar crossOverRate is 0.1 and may be too low for this method.\
		the 2 genomes can be of different length but it is recommended to keep them the same.\
		else you cannot predict the lengths of the 2 resulting children genomes.\
	\
	
\f0\b *multiPointCrossOver(parentA, parentB)
\f1\b0 \
		similar to singlepoint above but can cross over many times (zigzag between the 2 parents).\
		this method generally works better than singlepoint.\
	\
	
\f0\b *mutate(genome)
\f1\b0 \
		go through each gene in this genome and mutate with a chance of mutationRate.\
		if a gene is to be mutated, it is replaced by the value of mutationFunc.  inplace.\
	\
	
\f0\b *breedSinglePoint(parentA, parentB)
\f1\b0 \
		perform both singlepoint crossover and mutation in one go.\
		returns 2 new genomes [childA, childB]\
	\
	
\f0\b *breedMultiPoint(parentA, parentB)
\f1\b0 \
		perform both multipoint crossover and mutate above in one go.\
		returns 2 new genomes [childA, childB]\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
\cf5 //create 2 new genomes that will be our parents\cf0 \
a= \cf2 RedGAGenome\cf0 ([0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]);\
b= \cf2 RedGAGenome\cf0 ([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07]);\
\
\cf5 //breed 2 children.  run this multiple times to see how the chromosomes are zigzagged together\cf0 \
c= \cf2 RedGA\cf0 .breedMultiPoint(a, b);\
c.do\{\cf2 |x|\cf0  x.chromosome.postln\};		\cf5 //2 children\cf0 \
\
\
\cf5 //breed with a single crossover\cf0 \
\cf2 RedGA\cf0 .crossOverRate= 0.5;			\cf5 //make it more likely for crossover to happen at all\cf0 \
c= \cf2 RedGA\cf0 .breedSinglePoint(a, b);\
c.do\{\cf2 |x|\cf0  x.chromosome.postln\};		\cf5 //2 children\cf0 \
\
\
\cf5 //take one of the children and mutate\cf0 \
\cf2 RedGA\cf0 .mutationRate= 0.2;			\cf5 //make it pretty likely to mutate genes at all\cf0 \
\cf2 RedGA\cf0 .mutate(c[0]).chromosome;		\cf5 //mutated child\cf0 \
\
\
\cf5 //if working with genes not normalised 0-1 you should create a new mutationFunc\cf0 \
\cf5 //here the gene range is 0-99 and the mutationFunc may add or subtract 10 from the gene\cf0 \
\cf2 RedGA\cf0 .mutationFunc= \{\cf2 |x, i|\cf0  x+[10, -10].choose\};\
d= \cf2 RedGAGenome\cf0 ((0..99));			\cf5 //create a new genome with genes in range 0-99\cf0 \
d.chromosome;						\cf5 //before mutation\cf0 \
\cf2 RedGA\cf0 .mutate(d);\
d.chromosome;						\cf5 //here and there 10 should have been added/subtracted\cf0 \
\
\
\
\cf5 //to breed one child from two or more parents you can use a recursive function like this...\cf0 \
(								\cf5 //first back to defaults\cf0 \
\cf2 RedGA\cf0 .mutationFunc= \{1.0.rand\};\
\cf2 RedGA\cf0 .mutationRate= 0.001;\
\cf2 RedGA\cf0 .crossOverRate= 0.1;\
\
f= \{\cf2 |parents|\cf0 						\cf5 //recursive function\cf0 \
	if(parents.size>2, \{\
		\cf2 RedGA\cf0 .breedMultiPoint(parents[0], f.value(parents.drop(1))).choose;\
	\}, \{\
		\cf2 RedGA\cf0 .breedMultiPoint(parents[0], parents[1]).choose;\
	\});\
\});\
\
(\
a= \cf2 RedGAGenome\cf0 (0.1.dup(10));		\cf5 //5 parents\cf0 \
b= \cf2 RedGAGenome\cf0 (0.2.dup(10));\
c= \cf2 RedGAGenome\cf0 (0.3.dup(10));\
d= \cf2 RedGAGenome\cf0 (0.4.dup(10));\
e= \cf2 RedGAGenome\cf0 (0.5.dup(10));\
)\
f.value([a, b, c, d, e]).chromosome;	\cf5 //breed 1 child\cf0 \
\
\
\
\
\cf5 //-- sounding example1 - breed simple melodies by listening\cf0 \
\
s.boot;\
(\
a= \cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(8));	\cf5 //create parents with 8 random genes\cf0 \
b= \cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(8));\
c= \cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(8));\
d= \cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(8));\
)\
\
\cf5 //listen to them one after the other\cf0 \
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (a, 1)*12).round).play;\
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (b, 1)*12).round).play;\
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (c, 1)*12).round).play;\
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (d, 1)*12).round).play;\
\
\cf5 //say you like b and d best on subjective listening (you are the fitness function)\cf0 \
\cf5 //crossbreed and mutate these to get two new melodies with properties from both their parents\cf0 \
#e, f= \cf2 RedGA\cf0 .breedMultiPoint(b, d);\
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (e, 1)*12).round).play;\
\cf2 Pbind\cf0 (\cf6 \\dur\cf0 , 0.2, \cf6 \\degree\cf0 , (\cf2 Pn\cf0 (f, 1)*12).round).play;\
\
\
\
\
\cf5 //-- sounding example2 - fitness function trying to match original\cf0 \
\
\cf5 //set up\cf0 \
(\
\cf2 RedGA\cf0 .crossOverRate= 0.2;			\cf5 //raised due to the short genome (16)\cf0 \
\cf2 RedGA\cf0 .mutationRate= 0.01;\
\cf2 RedGA\cf0 .mutationFunc= \{\cf2 |x|\cf0  (x+0.1.rand2).clip(0, 1)\};\
)\
\
\cf5 //as original we will use an array of 8 pitch and duration pairs\cf0 \
~org= \cf2 RedGAGenome\cf0 (#[1, 0.1, 0.6, 0.1, 0.8, 0.1, 0, 0.2, 0, 0.1, 0.8, 0.1, 1, 0.1, 0.6, 0.2]);\
\
\cf5 //it sounds like this and the task is to breed a similar sounding chromosome from random\cf0 \
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~org.chromosome.clump(2)*5)).play;\
\
\
\cf5 //first create a pool with many random chromosomes - each with length 16\cf0 \
~pool= \{\cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(16))\}.dup(250);\
\
\cf5 //set up a function that will rate how much a chomosome differs from the orgiginal above\cf0 \
(\
~fitnessFunc= \{\cf2 |test, org|\cf0 			\cf5 //less difference gives higher rank (0-1)\cf0 \
	1-((test-org).abs.sum/test.size);\
\};\
)\
\
\cf5 //run a first update to determine fitness for all random chromosome parents in the pool\cf0 \
~pool.do\{\cf2 |x|\cf0  x.fitness= ~fitnessFunc.value(x.chromosome, ~org.chromosome)\};\
\
\cf5 //now we can sort the parent candidates by fitness\cf0 \
~pool.sort\{\cf2 |a, b|\cf0  a.fitness>b.fitness\};\
\
\cf5 //post the fittest top 10.  very unlikely that anyone will rank high as they are all random\cf0 \
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
\
\cf5 //play the best fit so far (after 0 generation) - will be pretty random\cf0 \
(\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //now all in one go: find fit parents, breed and add children to pool, remove as many less fit\cf0 \
(\
~thresh= (~pool.size*0.2).asInteger;			\cf5 //20% will survive in each generation\cf0 \
~newGenerationFunc= \{\
	\cf2 var\cf0  parents, children;\
	\cf5 //let the top 20% live and be parents\cf0 \
	parents= ~pool.keep(~thresh);\
	\cf5 //scramble and breed with neighbour\cf0 \
	children= parents.scramble.clump(2).collect\{\cf2 |a|\cf0  \cf2 RedGA\cf0 .breedMultiPoint(a[0], a[1])\}.flat;\
	\cf5 //put children and parents back into the pool and fill up with random chromosomes\cf0 \
	~pool= children++parents++\{\cf2 RedGAGenome\cf0 (\{1.0.rand\}.dup(16))\}.dup(~pool.size-(~thresh*2));\
	\cf5 //compare to original and update fitness\cf0 \
	~pool.do\{\cf2 |x|\cf0 \
		x.fitness= ~fitnessFunc.value(x.chromosome, ~org.chromosome);\
	\};\
	\cf5 //sort the pool by fitness\cf0 \
	~pool.sort\{\cf2 |a, b|\cf0  a.fitness>b.fitness\};\
\};\
)\
\
\cf5 //run one generation\cf0 \
~newGenerationFunc.value;\
\
\cf5 //top 10 fitness should have increased somewhat\cf0 \
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
\
\cf5 //play the best fit so far (after 1 generation) - should sound a bit more like the original\cf0 \
(\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //now we let the ga do its job.  run 10 generations\cf0 \
10.do\{~newGenerationFunc.value\};\
\
\cf5 //play the best fit so far (after 11 generation)\cf0 \
(\
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //and again\cf0 \
10.do\{~newGenerationFunc.value\};\
\
\cf5 //play the best fit so far (after 21 generation)\cf0 \
(\
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //and again\cf0 \
10.do\{~newGenerationFunc.value\};\
\
\cf5 //play the best fit so far (after 31 generation)\cf0 \
(\
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //and again\cf0 \
10.do\{~newGenerationFunc.value\};\
\
\cf5 //play the best fit so far (after 41 generation)\cf0 \
(\
~pool.keep(10).do\{\cf2 |x|\cf0  x.fitness.postln\};\
~bestFit= ~pool[0];\
\cf2 Pbind\cf0 (#[\cf6 \\degree\cf0 , \cf6 \\dur\cf0 ], \cf2 Pseq\cf0 (~bestFit.chromosome.clump(2)*5)).play;\
)\
\
\cf5 //and so on but it will most likely never reach 1.0\cf0 \
\
}